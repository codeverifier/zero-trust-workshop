# License for Gloo Mesh (Deprecated)
licenseKey: ""
# Gloo Gateway license key
glooGatewayLicenseKey: "${GLOO_PLATFORM_GATEWAY_LICENSE_KEY}"
# Gloo Mesh Enterprise license key
glooMeshLicenseKey: "${GLOO_PLATFORM_MESH_LICENSE_KEY}"
# Gloo Network license key
glooNetworkLicenseKey: ""
# Gloo trial license key
glooTrialLicenseKey: ""
# Useful instead of using plain keys in the Helm charts (Optional)
licenseSecretName: ""

# Name of the management cluster
global:
  cluster: ${MGMT_CLUSTER}

# Namespace to install Gloo Mesh Enterprise
adminNamespace: ""
# Set the logger to development mode, which can cause panics. Do not use in production.
devMode: false
# Set to true to permit unencrypted and unauthenticated communication between management plane and data planes. Do not use in production.
insecure: false
# Enable leader election for the HA deployment
leaderElection: true
# Debug mode. Do not use in production.
verbose: false

# Configuration for the gloo-mesh-mgmt-server deployment
glooMeshMgmtServer:
  enabled: true
  env:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: LICENSE_KEY
      valueFrom:
        secretKeyRef:
          key: key
          name: gloo-mesh-enterprise-license
          optional: true
  # Required for OpenShift installations: Allow the pod to be assigned a dynamic user ID.
  floatingUserId: false
  # Image details
  image:
    pullPolicy: IfNotPresent
    registry: gcr.io/gloo-mesh
    repository: gloo-mesh-mgmt-server
  ports:
    # gloo-mesh-mgmt-server service port for Gloo Mesh agents to connect to
    grpc: 9900
    healthcheck: 8091
    # Port on which to serve internal Prometheus metrics for the management server app
    stats: 9091
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
  # Static user ID to run the containers as. Unused if floatingUserId is 'true'
  runAsUser: 10101
  sidecars: {}
  # Concurrency to use for translation operations
  concurrency: 10
  # Enable cluster load balancing
  enableClusterLoadBalancing: false
  # Maximum message size for gRPC messages sent and received by the management server
  maxGrpcMessageSize: "4294967295"
  # Port to pull stats from
  statsPort: 9091
  # Configuration for the relay server
  relay:
    disableCa: true
    disableCaCertGeneration: true
    disableTokenGeneration: true
    # Relay to push RBAC resources to the management server
    pushRbac: true
    # Contains TLS certs for signing CSRs by agents 
    signingTlsSecret:
      name: relay-tls-signing-secret
    # Secret containing TLS Certificates used to secure the mgmt gRPC server with TLS
    tlsSecret:
      name: relay-server-tls-secret
    # Secret containing a shared Token for authenticating agents
    tokenSecret:
      key: token
      name: relay-identity-token-secret
      namespace: ""
  # Service type
  serviceType: LoadBalancer

# Configuration for the Gloo Mesh UI
glooMeshUi:
  enabled: true
  licenseSecretName: ""
  settingsName: settings
  serviceType: LoadBalancer
  env:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: LICENSE_KEY
      valueFrom:
        secretKeyRef:
          key: key
          name: gloo-mesh-enterprise-license
          optional: true
  # Required for OpenShift installations: Allow the pod to be assigned a dynamic user ID.
  floatingUserId: false
  # Image details
  image:
    pullPolicy: IfNotPresent
    registry: gcr.io/gloo-mesh
    repository: gloo-mesh-apiserver
  ports:
    console: 8090
    grpc: 10101
    healthcheck: 8081
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
  runAsUser: 10101
  sidecars:
    console:
      env: null
      image:
        pullPolicy: IfNotPresent
        registry: gcr.io/gloo-mesh
        repository: gloo-mesh-ui
      resources:
        requests:
          cpu: 125m
          memory: 256Mi
    envoy:
      env:
        - name: ENVOY_UID
          value: "0"
      image:
        pullPolicy: IfNotPresent
        registry: gcr.io/gloo-mesh
        repository: gloo-mesh-envoy
      resources:
        requests:
          cpu: 500m
          memory: 256Mi
  # OIDC authentication for the UI
  auth:
    backend: ""
    enabled: false
    oidc:
      appUrl: ""
      clientId: ""
      clientSecret: ""
      clientSecretName: ""
      issuerUrl: ""
      session:
        backend: ""
        redis:
          host: ""

# Configuration for Redis instance
glooMeshRedis:
  enabled: true
  env:
    - name: MASTER
      value: "true"
  floatingUserId: false
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: redis
    tag: 6.2.6
  ports:
    redis: 6379
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
  runAsUser: 10101
  serviceType: ClusterIP
  sidecars: {}
  addr: ""

prometheus:
  alertmanager:
    enabled: false
  enabled: true
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  podSecurityPolicy:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    fullnameOverride: prometheus-server
    persistentVolume:
      enabled: false
  serverFiles:
    alerting_rules.yml:
      groups:
        - name: GlooPlatformAlerts
          rules:
            - alert: GlooPlatformTranslationLatencyIsHigh
              annotations:
                runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                summary: The translation time has increased above 10 sec. It's currently
                  {{ $value | humanize }}.
              expr: histogram_quantile(0.99, sum(rate(gloo_mesh_translation_time_sec_bucket[5m]))
                by(le)) > 10
              for: 15m
              labels:
                severity: warning
            - alert: GlooPlatformReconscilerLatencyIsHigh
              annotations:
                runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                summary: The reconciliation time has increased above 80 sec. It's currently
                  {{ $value | humanize }}.
              expr: histogram_quantile(0.99, sum(rate(gloo_mesh_reconciler_time_sec_bucket[5m]))
                by(le)) > 80
              for: 15m
              labels:
                severity: warning
            - alert: GlooPlatformAgentsAreDisconnected
              annotations:
                runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                summary: 'The following cluster is disconnected: {{ $labels.cluster }}.
                  Check the Gloo Platform Agent pod in the cluster!'
              expr: count by(cluster) (sum by(cluster) (relay_push_clients_warmed == 0))
                > 0
              for: 5m
              labels:
                severity: warning
            - alert: GlooPlatformTranslationWarnings
              annotations:
                runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                summary: Gloo Platform has detected {{ $value | humanize }} translation
                  warnings in the last 5m. Check your {{ $labels.gvk }} resources!
              expr: increase(translation_warning[5m]) > 0
              labels:
                severity: warning
            - alert: GlooPlatformTranslationErrors
              annotations:
                runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                summary: Gloo Platform has detected {{ $value | humanize }} translation
                  errors in the last 5m. Check your {{ $labels.gvk }} resources!
              expr: increase(translation_error[5m]) > 0
              labels:
                severity: warning
            - alert: GlooPlatformRedisErrors
              annotations:
                runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
                summary: Gloo Platform has detected {{ $value | humanize }} Redis sync errors
                  in the last 5m.
              expr: increase(gloo_mesh_redis_sync_err[5m]) > 0
              labels:
                severity: warning
    prometheus.yml:
      scrape_configs:
        - job_name: gloo-platform-pods
          kubernetes_sd_configs:
            - namespaces:
                names:
                  - gloo-mesh
              role: pod
          relabel_configs:
            - action: keep
              regex: true
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (.+)
              source_labels:
                - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              source_labels:
                - __address__
                - __meta_kubernetes_pod_annotation_prometheus_io_port
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
                - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
                - __meta_kubernetes_pod_name
              target_label: pod
            - action: keep
              regex: gloo-mesh-mgmt-server
              source_labels:
                - __meta_kubernetes_pod_label_app
          scrape_interval: 15s
          scrape_timeout: 10s
  serviceAccounts:
    alertmanager:
      create: false
    nodeExporter:
      create: false
    pushgateway:
      create: false
    server:
      create: true
prometheusUrl: http://prometheus-server

# Useful if bundling with agent on a single cluster
registerMgmtPlane:
  # Disabled as most of our deployments will be multicluster
  enabled: false
  accessLogsBufferSize: 50
  cluster: ""
  devMode: false
  verbose: false
  ext-auth-service:
    enabled: false
    extraTemplateAnnotations:
      proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
  gloo-network-agent:
    enabled: false
  insecure: false
  istiodSidecar:
    createRoleBinding: false
    istiodServiceAccount:
      name: istiod
      namespace: istio-system
  leaderElection: true
  # Configuration for managed Istio control plane and gateway installations by using the Istio Lifecycle Manager
  managedInstallations:
    enabled: false
    cluster: ""
    controlPlane:
      enabled: true
      overrides: {}
    defaultRevision: false
    eastWestGateways: null
    images:
      hub: ${ISTIO_IMAGE_REPO}
      tag: ${ISTIO_IMAGE_TAG}
    northSouthGateways:
      - enabled: true
        name: istio-ingressgateway
        overrides: {}
    revision: ${ISTIO_REVISION}
  maxGrpcMessageSize: "4294967295"
  metricsBufferSize: 50
  rate-limiter:
    enabled: false
    extraTemplateAnnotations:
      proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
  relay:
    authority: gloo-mesh-mgmt-server.gloo-mesh
    clientTlsSecret:
      name: relay-client-tls-secret
    rootTlsSecret:
      name: relay-root-tls-secret
    serverAddress: gloo-mesh-mgmt-server:9900
    tokenSecret:
      key: token
      name: relay-identity-token-secret
      namespace: ""
  sidecar-accel:
    enabled: false